#include <stdio>
#include <stdlib>
#include "bmp8.h"

// Fonction utilitaire pour créer un noyau de filtre
float** createKernel(int size, float* values) {
    float** kernel = (float**)malloc(size * sizeof(float*));
    for (int i = 0; i < size; i++) {
        kernel[i] = (float*)malloc(size * sizeof(float));
        for (int j = 0; j < size; j++) {
            kernel[i][j] = values[i * size + j];
        }
    }
    return kernel;
}

// Fonction pour libérer le noyau
void freeKernel(float** kernel, int size) {
    for (int i = 0; i < size; i++) {
        free(kernel[i]);
    }
    free(kernel);
}

int main() {
    char filename[256];
    printf("Entrez l'adresse du fichier image BMP: ");
    scanf("%255s", filename);

    t_bmp8* img = bmp8_loadImage(filename);
    if (img == NULL) {
        printf("Erreur lors du chargement de l'image\n");
        return 1;
    }

    int choix;
    printf("\nChoisissez une operation:\n");
    printf("1. Negatif\n");
    printf("2. Luminosite\n");
    printf("3. Seuil\n");
    printf("4. Box Blur\n");
    printf("5. Gaussian Blur\n");
    printf("6. Outline\n");
    printf("7. Emboss\n");
    printf("8. Sharpen\n");
    scanf("%d", &choix);

    switch (choix) {
        case 1:
            bmp8_negative(img);
            bmp8_saveImage("negative.bmp", img);
            break;
        case 2: {
            int value;
            printf("Entrez la valeur de luminosité (-255 à 255): ");
            scanf("%d", &value);
            bmp8_brightness(img, value);
            bmp8_saveImage("brightness.bmp", img);
            break;
        }
        case 3: {
            int threshold;
            printf("Entrez la valeur de seuil (0-255): ");
            scanf("%d", &threshold);
            bmp8_threshold(img, threshold);
            bmp8_saveImage("threshold.bmp", img);
            break;
        }
        case 4: {
            float box_values[] = {
                1.0f/9, 1.0f/9, 1.0f/9,
                1.0f/9, 1.0f/9, 1.0f/9,
                1.0f/9, 1.0f/9, 1.0f/9
            };
            float** kernel = createKernel(3, box_values);
            bmp8_applyFilter(img, kernel, 3);
            bmp8_saveImage("box_blur.bmp", img);
            freeKernel(kernel, 3);
            break;
        }
        case 5: {
            float gaussian_values[] = {
                1.0f/16, 2.0f/16, 1.0f/16,
                2.0f/16, 4.0f/16, 2.0f/16,
                1.0f/16, 2.0f/16, 1.0f/16
            };
            float** kernel = createKernel(3, gaussian_values);
            bmp8_applyFilter(img, kernel, 3);
            bmp8_saveImage("gaussian_blur.bmp", img);
            freeKernel(kernel, 3);
            break;
        }
        case 6: {
            float outline_values[] = {
                -1, -1, -1,
                -1,  8, -1,
                -1, -1, -1
            };
            float** kernel = createKernel(3, outline_values);
            bmp8_applyFilter(img, kernel, 3);
            bmp8_saveImage("outline.bmp", img);
            freeKernel(kernel, 3);
            break;
        }
        case 7: {
            float emboss_values[] = {
                -2, -1,  0,
                -1,  1,  1,
                 0,  1,  2
            };
            float** kernel = createKernel(3, emboss_values);
            bmp8_applyFilter(img, kernel, 3);
            bmp8_saveImage("emboss.bmp", img);
            freeKernel(kernel, 3);
            break;
        }
        case 8: {
            float sharpen_values[] = {
                 0, -1,  0,
                -1,  5, -1,
                 0, -1,  0
            };
            float** kernel = createKernel(3, sharpen_values);
            bmp8_applyFilter(img, kernel, 3);
            bmp8_saveImage("sharpen.bmp", img);
            freeKernel(kernel, 3);
            break;
        }
        default:
            printf("Option invalide\n");
    }

    bmp8_free(img);
    printf("Traitement termine\n");
    return 0;
}
